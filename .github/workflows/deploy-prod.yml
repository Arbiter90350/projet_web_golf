name: deploy-prod

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'frontend/nginx/**'
      - 'docker-compose.yml'
      - 'docker-compose.prod.yml'
      - '.github/workflows/deploy-prod.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Optional: build check to fail fast if frontend fails to build with /api
      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Frontend build sanity check
        env:
          VITE_API_URL: /api
        run: |
          cd frontend
          rm -rf node_modules package-lock.json ~/.npm/_cacache || true
          npm install
          npm run build

      - name: Validate required deployment secrets
        shell: bash
        run: |
          set -euo pipefail
          missing=()
          [[ -z "${{ secrets.VPS_HOST }}" ]] && missing+=(VPS_HOST)
          [[ -z "${{ secrets.VPS_USER }}" ]] && missing+=(VPS_USER)
          [[ -z "${{ secrets.VPS_SSH_KEY }}" ]] && missing+=(VPS_SSH_KEY)
          [[ -z "${{ secrets.VPS_APP_DIR }}" ]] && missing+=(VPS_APP_DIR)
          if (( ${#missing[@]} > 0 )); then
            echo "Missing required secrets: ${missing[*]}" >&2
            exit 1
          fi
      # SCP step removed: move to git-based deployment on the VPS

      - name: Deploy on VPS with Docker Compose (prod)
        uses: appleboy/ssh-action@v1.2.0
        env:
          VPS_APP_DIR: ${{ secrets.VPS_APP_DIR }}
          GITHUB_TOKEN_READONLY: ${{ secrets.GITHUB_TOKEN_READONLY }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_SSH_PORT || '22' }}
          envs: VPS_APP_DIR,GITHUB_TOKEN_READONLY
          script: |
            set -euo pipefail
            cd "$VPS_APP_DIR"
            # Ensure repository is initialized on the VPS
            if [ ! -d .git ]; then
              echo "Repository not initialized in $VPS_APP_DIR. Please clone the repo on the VPS and configure read-only deploy key for GitHub access." >&2
              exit 1
            fi
            # Ensure .env file exists (managed on VPS, not in repo)
            if [ ! -f .env ]; then
              echo "Missing .env on server. Aborting." >&2
              exit 1
            fi
            # Update code from origin/main safely with SSH->HTTPS fallback if needed
            if ! git fetch --all --prune; then
              echo "git fetch via SSH failed. Attempting HTTPS fallback..." >&2
              if [ -n "${GITHUB_TOKEN_READONLY:-}" ]; then
                current_url=$(git remote get-url origin || true)
                https_url="$current_url"
                if echo "$current_url" | grep -qE '^git@github.com:'; then
                  path=$(echo "$current_url" | sed -E 's#^git@github.com:(.+)\\.git$#\1#')
                  https_url="https://github.com/$path.git"
                fi
                sanitized_host=$(echo "$https_url" | sed -E 's#^https?://##')
                git remote set-url origin "https://${GITHUB_TOKEN_READONLY}@${sanitized_host}"
                git fetch --all --prune
              else
                echo "No GITHUB_TOKEN_READONLY provided; cannot fallback to HTTPS." >&2
                exit 1
              fi
            fi
            git reset --hard origin/main
            # Rebuild and redeploy containers
            docker compose -f docker-compose.yml -f docker-compose.prod.yml pull || true
            docker compose -f docker-compose.yml -f docker-compose.prod.yml build --pull
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --remove-orphans
            docker system prune -f || true
