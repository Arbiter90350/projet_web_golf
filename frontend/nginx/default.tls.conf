<<<<<<< HEAD
# HTTP -> HTTPS redirection
server {
  listen 80;
  server_name app.golf-rougemont.com;
  return 301 https://$host$request_uri;
}

# HTTPS server with TLS
server {
  listen 443 ssl http2;
  server_name app.golf-rougemont.com;

  # TLS certificates are mounted read-only into the container
  ssl_certificate     /etc/nginx/certs/fullchain.pem;
  ssl_certificate_key /etc/nginx/certs/privkey.pem;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers off;

  # Upload size (align with backend MAX_FILE_SIZE)
  client_max_body_size 500M;

  # Security headers
=======
# Nginx prod avec TLS (terminaison TLS dans ce conteneur)
# Sert la SPA React et proxifie /api/ vers le backend en réseau Docker interne.
# Certificats montés dans /etc/nginx/certs (voir docker-compose.prod.yml et TLS_CERTS_DIR)

# Redirection HTTP -> HTTPS
server {
  listen 80;
  server_name _;
  # Exception ACME: servir les challenges Let's Encrypt en clair (port 80)
  location ^~ /.well-known/acme-challenge/ {
    root /var/www/certbot;
    default_type text/plain;
    try_files $uri =404;
  }

  # Tout le reste redirige vers HTTPS
  location / {
    return 301 https://$host$request_uri;
  }
}

# HTTPS
server {
  listen 443 ssl http2;
  server_name _;

  # Chemins des certificats (montés via volume)
  ssl_certificate     /etc/nginx/certs/fullchain.pem;
  ssl_certificate_key /etc/nginx/certs/privkey.pem;

  # Bonnes pratiques TLS
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers off;
  ssl_session_cache shared:SSL:10m;

  # Limites d'upload (cohérent avec backend)
  client_max_body_size 500M;

  # En-têtes de sécurité
>>>>>>> 9fea6b1 (feat: implement TLS termination in frontend Nginx container with Let's Encrypt support)
  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header Referrer-Policy "strict-origin-when-cross-origin" always;
  add_header Permissions-Policy "camera=(), microphone=(), geolocation=()" always;
<<<<<<< HEAD
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
  add_header Content-Security-Policy "default-src 'self'; img-src 'self' https: data:; style-src 'self' 'unsafe-inline'; script-src 'self'; connect-src 'self' https: http:; font-src 'self' data:; media-src 'self' https:; frame-src 'self' https:; frame-ancestors 'self'; worker-src 'self'; manifest-src 'self'" always;

  # SPA
=======
  # HSTS (activé car HTTPS effectif)
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
  # CSP stricte pour SPA + API + PWA
  add_header Content-Security-Policy "default-src 'self'; img-src 'self' https: data:; style-src 'self' 'unsafe-inline'; script-src 'self'; connect-src 'self' https: http:; font-src 'self' data:; media-src 'self' https:; frame-src 'self' https:; frame-ancestors 'self'; worker-src 'self'; manifest-src 'self'" always;

  # Application SPA
>>>>>>> 9fea6b1 (feat: implement TLS termination in frontend Nginx container with Let's Encrypt support)
  location / {
    root   /usr/share/nginx/html;
    index  index.html index.htm;
    try_files $uri $uri/ /index.html;
<<<<<<< HEAD
=======
    # Pas de cache pour le HTML (SPA)
>>>>>>> 9fea6b1 (feat: implement TLS termination in frontend Nginx container with Let's Encrypt support)
    add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0" always;
    expires -1;
  }

<<<<<<< HEAD
  # Proxy API -> backend (Docker network)
=======
  # ACME challenge également servi sur HTTPS (redondant mais inoffensif)
  location ^~ /.well-known/acme-challenge/ {
    root /var/www/certbot;
    default_type text/plain;
    try_files $uri =404;
  }

  # Proxy API -> backend (réseau Docker interne)
  # Important: pas de trailing slash pour conserver le chemin /api/... côté backend
>>>>>>> 9fea6b1 (feat: implement TLS termination in frontend Nginx container with Let's Encrypt support)
  location /api/ {
    proxy_pass http://backend:5000;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Connection "";
    proxy_buffering off;
<<<<<<< HEAD
    proxy_request_buffering off;
=======
    proxy_request_buffering off; # utile pour les uploads volumineux
    # Timeouts généreux pour fichiers lourds
>>>>>>> 9fea6b1 (feat: implement TLS termination in frontend Nginx container with Let's Encrypt support)
    proxy_connect_timeout 30s;
    proxy_read_timeout 15m;
    proxy_send_timeout 15m;
  }

<<<<<<< HEAD
  # Health endpoint mapping (backend exposes /health without /api)
=======
  # Exception: /api/health doit atteindre /health côté backend (endpoint hors préfixe /api)
>>>>>>> 9fea6b1 (feat: implement TLS termination in frontend Nginx container with Let's Encrypt support)
  location = /api/health {
    proxy_pass http://backend:5000/health;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Connection "";
    proxy_buffering off;
    proxy_connect_timeout 10s;
    proxy_read_timeout 60s;
    proxy_send_timeout 60s;
  }

  error_page   500 502 503 504  /50x.html;
  location = /50x.html {
    root   /usr/share/nginx/html;
  }

<<<<<<< HEAD
  # PWA
=======
  # PWA: éviter le cache agressif pour le Service Worker et le manifest
>>>>>>> 9fea6b1 (feat: implement TLS termination in frontend Nginx container with Let's Encrypt support)
  location = /sw.js {
    root /usr/share/nginx/html;
    add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0" always;
    expires -1;
  }

  location = /registerSW.js {
    root /usr/share/nginx/html;
    add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0" always;
    expires -1;
  }

  location = /manifest.webmanifest {
    root /usr/share/nginx/html;
    add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0" always;
    add_header Content-Type "application/manifest+json" always;
    expires -1;
  }

<<<<<<< HEAD
  # Long cache for versioned assets
=======
  # Cache long immutable pour assets versionnés
>>>>>>> 9fea6b1 (feat: implement TLS termination in frontend Nginx container with Let's Encrypt support)
  location ~* \.(?:js|css|png|jpg|jpeg|gif|ico|svg|webp|woff|woff2|ttf|eot)$ {
    root /usr/share/nginx/html;
    expires 1y;
    add_header Cache-Control "public, max-age=31536000, immutable" always;
  }
}
